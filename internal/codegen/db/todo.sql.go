// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo
(title, is_completed)
VALUES
($1, $2)
RETURNING id, title, is_completed
`

type CreateTodoParams struct {
	Title       string `db:"title" json:"title"`
	IsCompleted bool   `db:"is_completed" json:"is_completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Title, arg.IsCompleted)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.IsCompleted)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
DELETE FROM todo
WHERE id = $1
RETURNING id, title, is_completed
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRow(ctx, deleteTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.IsCompleted)
	return i, err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, is_completed
FROM todo
where id = $1 
LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.IsCompleted)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, is_completed
FROM todo
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTodosParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Title, &i.IsCompleted); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo
SET title = $1, is_completed = $2
WHERE id = $3
RETURNING id, title, is_completed
`

type UpdateTodoParams struct {
	Title       string `db:"title" json:"title"`
	IsCompleted bool   `db:"is_completed" json:"is_completed"`
	ID          int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo, arg.Title, arg.IsCompleted, arg.ID)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.IsCompleted)
	return i, err
}
